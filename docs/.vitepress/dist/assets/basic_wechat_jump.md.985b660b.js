import{_ as t,c as e,o as a,d as l}from"./app.008430f5.js";const w=JSON.parse('{"title":"小程序路由跳转","description":"","frontmatter":{},"headers":[{"level":2,"title":"wx.navigateTo()","slug":"wx-navigateto","link":"#wx-navigateto","children":[]},{"level":2,"title":"wx.redirectTo()","slug":"wx-redirectto","link":"#wx-redirectto","children":[]},{"level":2,"title":"wx.switchTab()","slug":"wx-switchtab","link":"#wx-switchtab","children":[]},{"level":2,"title":"wx.navigateBack()","slug":"wx-navigateback","link":"#wx-navigateback","children":[]},{"level":2,"title":"wx.reLaunch()","slug":"wx-relaunch","link":"#wx-relaunch","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"basic/wechat/jump.md","lastUpdated":null}'),n={name:"basic/wechat/jump.md"},i=l('<h1 id="小程序路由跳转" tabindex="-1">小程序路由跳转 <a class="header-anchor" href="#小程序路由跳转" aria-hidden="true">#</a></h1><p>常见的小程序跳转方式：</p><ul><li>wx.navigateTo(Object)</li><li>wx.redirectTo(Object)</li><li>wx.swtichTab(Object)</li><li>wx.navigateBack(Object)</li><li>wx.reLaunch(Object)</li></ul><h2 id="wx-navigateto" tabindex="-1">wx.navigateTo() <a class="header-anchor" href="#wx-navigateto" aria-hidden="true">#</a></h2><p><code>wx.navigateTo()</code>用于保留当前页面、跳转到应用内的某个页面，使用 <code>wx.navigateBack()</code>可以返回到原页面</p><blockquote><p><strong>对于页面不是特别多的小程序，通常推荐使用 wx.navigateTo进行跳转， 以便返回原页面，以提高加载速度。当页面特别多时，则不推荐使用</strong></p></blockquote><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:center;">必填</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">url</td><td style="text-align:center;">string</td><td style="text-align:center;"></td><td style="text-align:center;">是</td><td style="text-align:center;">需要跳转应用内<code>非tabBar</code>的页面的路径，路径后可以带参数</td></tr><tr><td style="text-align:center;">events</td><td style="text-align:center;">Object</td><td style="text-align:center;"></td><td style="text-align:center;">否</td><td style="text-align:center;">页面间通信接口,用于监听被打开页面发送到当前页面的数据</td></tr><tr><td style="text-align:center;">success</td><td style="text-align:center;">function</td><td style="text-align:center;"></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用成功的回调函数</td></tr><tr><td style="text-align:center;">fail</td><td style="text-align:center;">function</td><td style="text-align:center;"></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用失败的回调函数</td></tr><tr><td style="text-align:center;">complete</td><td style="text-align:center;">function</td><td style="text-align:center;"></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用结束的回调函数(不管成功失败都会调用)</td></tr></tbody></table><h2 id="wx-redirectto" tabindex="-1">wx.redirectTo() <a class="header-anchor" href="#wx-redirectto" aria-hidden="true">#</a></h2><p><code>wx.redirectTo()</code>用于重定向，当页面过多时，被保留页面会挤占微信分配给小程序的内存，或是达到微信所限制的 10 层页面栈的情况下，我们应该考虑选择 <code>wx.redirectTo</code></p><blockquote><p><strong>这样的跳转，可以避免跳转前页面占据运行内存，但返回时页面需要重新加载，增加了返回页面的显示时间</strong></p></blockquote><h2 id="wx-switchtab" tabindex="-1">wx.switchTab() <a class="header-anchor" href="#wx-switchtab" aria-hidden="true">#</a></h2><p><code>wx.switchTab()</code>跳转到<code>tabBar</code>页面，并关闭其他所有非<code>tabBar</code>页面</p><blockquote><p><strong>需要跳转的tabBar页面的路径需要在app.json的<code>tabBar</code>字段定义</strong></p></blockquote><h2 id="wx-navigateback" tabindex="-1">wx.navigateBack() <a class="header-anchor" href="#wx-navigateback" aria-hidden="true">#</a></h2><p><code>wx.navigateBack()</code>用于关闭当前页面，并返回上一页面或多级页面，开发者可以通过<code>getCurrentPages()</code>获取当前的页面栈，<code>决定需要返回几层则设置对象的delta属性即可</code></p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:center;">必填</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">delta</td><td style="text-align:center;">number</td><td style="text-align:center;">1</td><td style="text-align:center;">否</td><td style="text-align:center;">返回的页面数，如果delta大于现有页面数，则返回首页</td></tr><tr><td style="text-align:center;">success</td><td style="text-align:center;">function</td><td style="text-align:center;"></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用成功的回调函数</td></tr><tr><td style="text-align:center;">fail</td><td style="text-align:center;">function</td><td style="text-align:center;"></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用失败的回调函数</td></tr><tr><td style="text-align:center;">complete</td><td style="text-align:center;">function</td><td style="text-align:center;"></td><td style="text-align:center;">否</td><td style="text-align:center;">接口调用结束的回调函数(不管成功失败都会调用)</td></tr></tbody></table><h2 id="wx-relaunch" tabindex="-1">wx.reLaunch() <a class="header-anchor" href="#wx-relaunch" aria-hidden="true">#</a></h2><p><code>wx.reLaunch()</code>关闭所有页面，打开到应用内的某个页面，返回的时候跳到首页</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>关于上述五种跳转方式，做下总结：</p><ul><li>navigateTo 保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原页</li><li>redirectTo 关闭当前页面，跳转到应用内的某个页面</li><li>switchTab 跳转到 tabBar 页面，同时关闭其他非 tabBar 页面</li><li>navigateBack 返回上一页面</li><li>reLanch 关闭所有页面，打开到应用内的某个页面</li></ul><p>其中关于它们的页面栈的关系如下：</p><ul><li><p>navigateTo 新页面入栈</p></li><li><p>redirectTo 当前页面出栈，新页面入栈</p></li><li><p>navigateBack 页面不断出栈，直到目标返回页，新页面入栈</p></li><li><p>switchTab 页面全部出栈，只留下新的 Tab 页面</p></li><li><p>reLanch 页面全部出栈，只留下新的页面</p></li></ul>',23),d=[i];function c(r,s,x,o,h,g){return a(),e("div",null,d)}const u=t(n,[["render",c]]);export{w as __pageData,u as default};
