import{_ as e,c as a,o as d,d as i}from"./app.008430f5.js";const f=JSON.parse('{"title":"申明","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是申明文件","slug":"什么是申明文件","link":"#什么是申明文件","children":[]},{"level":2,"title":"申明文件的作用","slug":"申明文件的作用","link":"#申明文件的作用","children":[]},{"level":2,"title":"发布申明文件","slug":"发布申明文件","link":"#发布申明文件","children":[{"level":3,"title":"第一方声明","slug":"第一方声明","link":"#第一方声明","children":[]}]},{"level":2,"title":"写申明文件","slug":"写申明文件","link":"#写申明文件","children":[]}],"relativePath":"advance/typescript/declare.md","lastUpdated":null}'),t={name:"advance/typescript/declare.md"},l=i('<h1 id="申明" tabindex="-1">申明 <a class="header-anchor" href="#申明" aria-hidden="true">#</a></h1><p>当我们要开源一个库的时候，就需要我们写申明文件了。<br></p><h2 id="什么是申明文件" tabindex="-1">什么是申明文件 <a class="header-anchor" href="#什么是申明文件" aria-hidden="true">#</a></h2><p>通常我们会把声明语句放到一个单独的文件（xxx.d.ts）中，这就是声明文件，以 .d.ts 为后缀。</p><h2 id="申明文件的作用" tabindex="-1">申明文件的作用 <a class="header-anchor" href="#申明文件的作用" aria-hidden="true">#</a></h2><p>接口、类、类型别名是用来定义类型别名的。但是每次都需要我们引入然后给变量定义类型。但是申明文件只需要我们申明一次，在项目中不需要再引入和定义类型就能全局直接使用。</p><h2 id="发布申明文件" tabindex="-1">发布申明文件 <a class="header-anchor" href="#发布申明文件" aria-hidden="true">#</a></h2><ol><li>将什么文件向开源库提 PR，声明文件与源码放在一起，作为第一方声明。</li><li>发布到 DefinitelyTyped，作为第三方声明文件。</li></ol><h3 id="第一方声明" tabindex="-1">第一方声明 <a class="header-anchor" href="#第一方声明" aria-hidden="true">#</a></h3><ol><li>给<code>package.json</code>中的<code>types</code> 或 <code>typeings</code>字段指定一个类型声明文件地址</li><li>在项目根目录下，编写一个<code>index.d.ts</code>文件,该文件会自动读取</li><li>针对入口文件（package.json 中的 main 字段指定的入口文件），编写一个同名不同后缀的 .d.ts 文件，这样也会被自动读取。</li></ol><h2 id="写申明文件" tabindex="-1">写申明文件 <a class="header-anchor" href="#写申明文件" aria-hidden="true">#</a></h2>',11),r=[l];function n(c,s,h,o,p,_){return d(),a("div",null,r)}const x=e(t,[["render",n]]);export{f as __pageData,x as default};
