import{_ as s,c as a,o as l,d as n}from"./app.008430f5.js";const C=JSON.parse('{"title":"Webpack5","description":"","frontmatter":{},"headers":[{"level":2,"title":"webpack 和 vite的异同","slug":"webpack-和-vite的异同","link":"#webpack-和-vite的异同","children":[]},{"level":2,"title":"如何开发webpack插件","slug":"如何开发webpack插件","link":"#如何开发webpack插件","children":[{"level":3,"title":"1.官方文档","slug":"_1-官方文档","link":"#_1-官方文档","children":[]},{"level":3,"title":"2.webpack 插件组成","slug":"_2-webpack-插件组成","link":"#_2-webpack-插件组成","children":[]},{"level":3,"title":"3.webpack打包过程","slug":"_3-webpack打包过程","link":"#_3-webpack打包过程","children":[]}]}],"relativePath":"advance/webpack5/index.md","lastUpdated":null}'),p={name:"advance/webpack5/index.md"},o=n(`<h1 id="webpack5" tabindex="-1">Webpack5 <a class="header-anchor" href="#webpack5" aria-hidden="true">#</a></h1><h2 id="webpack-和-vite的异同" tabindex="-1">webpack 和 vite的异同 <a class="header-anchor" href="#webpack-和-vite的异同" aria-hidden="true">#</a></h2><blockquote><p>基础概念不同</p></blockquote><ul><li>webpack是一个模块打包器，可以把不同类型的模块和资源文件打包为静态资源，具有高度的可配置性，通过插件和loader扩展其功能</li><li>vite是一个基于浏览器原生ES的开发服务器，提供了如：快速冷启动、即时热更新和真正的按需编译。</li></ul><blockquote><p>编译方式不同</p></blockquote><ul><li>webpack会将所有的模块打包成一个bundle.js文件然后运行</li><li>vite在开发模式下，没有打包的步骤，利用浏览器ES Module Imports的特性，只有在真正需要时编译文件； 生产模式下，vite使用Rollup打包，提供了更好的tree-shaking，代码压缩和性能优化。</li></ul><blockquote><p>开发效率不同</p></blockquote><ul><li>webpack是全量更新，即使修改一个小文件，也会重新编译整个应用，在大型应用中可能导致编译速度变慢。</li><li>vite是增量更新，只更新修改的文件</li></ul><blockquote><p>扩展性不同</p></blockquote><ul><li>vite的生态相比webpack的成熟的插件生态还是有一些距离</li></ul><blockquote><p>应用场景不同</p></blockquote><ul><li><p>webpack由于其丰富的功能和扩展性，适合于大型、复杂的项目。</p></li><li><p>vite凭借其轻量和速度，更适合于中小型项目和快速原型开发。</p></li></ul><h2 id="如何开发webpack插件" tabindex="-1">如何开发webpack插件 <a class="header-anchor" href="#如何开发webpack插件" aria-hidden="true">#</a></h2><h3 id="_1-官方文档" tabindex="-1">1.<a href="https://webpack.docschina.org/contribute/writing-a-plugin/#creating-a-plugin" target="_blank" rel="noreferrer">官方文档</a> <a class="header-anchor" href="#_1-官方文档" aria-hidden="true">#</a></h3><h3 id="_2-webpack-插件组成" tabindex="-1">2.webpack 插件组成 <a class="header-anchor" href="#_2-webpack-插件组成" aria-hidden="true">#</a></h3><ul><li>一个<code>JavaScript命名函数</code>或<code>JavaScript类</code></li><li>在插件函数的<code>prototype</code>上定义一个<code>apply</code>方法</li><li>指定一个绑定到webpack自身的<code>事件钩子</code></li><li>处理webpack内部实例的特定数据</li><li>功能<code>完成时处理</code>webpack提供的<code>回调</code></li></ul><p><code>Compiler</code>它扩展自<code>Tapable</code>类，设置了一系列的事件钩子和各种配置参数，并定义了webpack诸如<code>启动编译</code>、<code>观测文件变动</code>、<code>将编译结果文件写入本地</code>等一系列核心方法。</p><p>常见事件钩子介绍:</p><ul><li>beforeRun: 在编译器开始读取 records 之前执行</li><li>run: 在读取 records之 前</li><li>thisCompilation： 在 compilation 初始化时执行</li><li>compilation：在 compilation 创建之后执行</li><li>make：在 complication 完成之前执行</li><li>afterCompilation：在 compilation 完成后执行</li><li>emit：在生成文件到 output 目录之前执行</li><li>afterEmit：在生成文件到 output 目录之后执行</li><li>done：在 compilation 完成之后执行;</li></ul><p><code>Compilation</code> 类扩展(extend)自 Tapable，并提供了以下生命周期钩子:</p><ul><li>addChunk</li><li>addEntry</li><li>deleteAsset</li><li>buildModule</li><li>optimize</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">创建一个JS文件，</span><span style="color:#82AAFF;">定义插件类</span><span style="color:#A6ACCD;">(需要实现apply方法，该方法在webpack构建过程中被调用)</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">在apply方法中编写插件的逻辑，可以监听wepack不同的生命周期事件，并执行相应操作</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 在compiler对象上注册事件监听器</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someHook</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyPlugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">在插件逻辑中，可以利用Webpack提供的API来获取构建过程中的相关信息，并进行相应的处理。可以修改Webpack的配置、添加新的资源、处理构建结果等。</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 在compiler对象上注册事件监听器</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someHook</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyPlugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">done</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tap</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyPlugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">stats</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 构建完成后完成操作</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Build completed!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">将插件导出，以便在webpack配置文件中使用</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyPlugin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">5</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">在Webpack配置文件中引入插件，并将其作为插件配置项添加到plugins数组中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./path/to/MyPlugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置其他Webpack选项</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyPlugin</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 一个JavaScript命名函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyExampleWebpackPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在插件函数的prototype上定义一个apply方法</span></span>
<span class="line"><span style="color:#FFCB6B;">MyExampleWebpackPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 指定一个挂载到webpack自身的事件钩子。</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plugin</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpacksEventHook</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compilation</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">这是一个插件demo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 功能完成后调用 webpack 提供的回调</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在开发Plugin时我们最常用的两个对象就是 Compiler 和 Compilation, 他们是Plugin和webpack之间的桥梁。</p><h4 id="compiler对象" tabindex="-1"><code>compiler</code>对象 <a class="header-anchor" href="#compiler对象" aria-hidden="true">#</a></h4><p>Compiler 对象包含了Webpack环境所有的配置信息，包含options，loaders, plugins这些项，这个对象在webpack启动时候被实例化，它是全局唯一的。我们可以把它理解为webpack的实列。</p><h4 id="compilation对象" tabindex="-1"><code>compilation</code>对象 <a class="header-anchor" href="#compilation对象" aria-hidden="true">#</a></h4><h3 id="_3-webpack打包过程" tabindex="-1">3.webpack打包过程 <a class="header-anchor" href="#_3-webpack打包过程" aria-hidden="true">#</a></h3><ul><li>1.<code>解析入口文件</code>：Webpack从配置文件中读取入口文件的路径，然后开始解析入口文件及其依赖的模块</li><li>2.<code>构建模块依赖关系</code>：Webpack根据入口文件和其依赖的模块，递归地构建模块之间的依赖关系图，形成一个依赖树</li><li>3.<code>解析模块</code>： Webpack根据模块的文件类型，使用相应的Loader对模块进行解析和转换。例如，对于JavaScript模块，使用Babel Loader进行转换，对于CSS模块，使用CSS Loader进行解析。</li><li>4.<code>模块打包</code>：Webpack将经过解析和转换的模块打包成一个或多个输出文件。可以通过配置文件指定输出文件的名称、路径和格式等。</li><li>5.<code>优化与处理</code>： Webpack对打包后的文件进行优化和处理。这包括代码压缩、文件合并、资源提取等操作，以减小文件体积、提升加载速度和优化用户体验。</li><li>6.<code>输出结果</code>: Webpack将打包处理后的文件输出到指定的目录中，供浏览器或服务器使用</li></ul><p>在整个打包过程中，Webpack通过配置文件中的各种配置选项，如入口文件、输出路径、Loader和插件等，来控制打包的行为和处理方式。通过灵活配置，可以满足不同项目的需求，并实现代码的模块化、优化和可维护性。</p>`,30),e=[o];function c(t,r,i,y,D,F){return l(),a("div",null,e)}const d=s(p,[["render",c]]);export{C as __pageData,d as default};
