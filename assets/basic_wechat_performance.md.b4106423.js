import{_ as e,c as a,o as t,d as l}from"./app.008430f5.js";const i="/lucky-blog/wechat/preload.png",o="/lucky-blog/wechat/prepack.png",m=JSON.parse('{"title":"性能","description":"","frontmatter":{},"headers":[{"level":2,"title":"提高应用速度的两个手段","slug":"提高应用速度的两个手段","link":"#提高应用速度的两个手段","children":[{"level":3,"title":"加载","slug":"加载","link":"#加载","children":[]},{"level":3,"title":"渲染","slug":"渲染","link":"#渲染","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"basic/wechat/performance.md","lastUpdated":null}'),c={name:"basic/wechat/performance.md"},r=l('<h1 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-hidden="true">#</a></h1><p>小程序启动往往会遇到白屏、正在加载等场景，这是因为首次(冷启动)前,微信会为小程序准备好通用的运行环境，如运行中的线程和一些基础库的初始化,如下：</p><ul><li><strong>下载小程序代码包</strong></li><li><strong>加载小程序代码包</strong></li><li><strong>初始化小程序首页</strong></li></ul><p>ps: 下载到的小程序代码包不是小程序的源代码，而是<code>编译、压缩、打包之后的代码包</code><img src="'+i+'" alt=""></p><h2 id="提高应用速度的两个手段" tabindex="-1">提高应用速度的两个手段 <a class="header-anchor" href="#提高应用速度的两个手段" aria-hidden="true">#</a></h2><p>围绕以上启动流程，可以从<code>加载</code>,<code>渲染</code>两个角度进行优化</p><h3 id="加载" tabindex="-1">加载 <a class="header-anchor" href="#加载" aria-hidden="true">#</a></h3><p>一、控制小程序包的大小：</p><ul><li>代码包的体积压缩可以通过勾选开发者工具中&quot;上传代码时，压缩代码&quot;选项</li><li>及时清理无用的代码和资源</li><li>减少资源包中的图片等资源的数量和大小（理论上除了小icon，其他图片资源从网络下载），图片资源压缩率有限</li></ul><p>二、采取分包加载的操作，将用户访问率高的页面放在主包里，将访问率低的页面放在子包里，按需加载 <br> 子包不宜拆的太大，防止有明显的卡顿，可以采用子包预加载技术 <br><img src="'+o+'" alt=""></p><h3 id="渲染" tabindex="-1">渲染 <a class="header-anchor" href="#渲染" aria-hidden="true">#</a></h3><p>一、关于<strong>首屏渲染优化</strong>的手段如下：</p><ul><li>请求可以在页面<code>onLoad()</code>就加载，不需要等页面<code>ready</code>后再异步请求数据</li><li>尽量<code>减少不必要的https请求</code>,可使用<code>getStorageSync()</code>和<code>setStorageSync()</code>方法将数据存储在本地</li><li>可以将前置页面一些有用的数据带到当前页，（如：列表页的某些数据--&gt;&gt;详情页）没有数据的模块可以进行<code>骨架屏的占位</code></li></ul><p>二、在微信小程序中，<strong>提高页面的多次渲染效率</strong>主要在于正确使用setData()：</p><ul><li>不要频繁调用<code>setData()</code>,应考虑将多次<code>setData()</code>合并成一次<code>setData()</code>调用</li><li>数据通信的性能与数据量正相关，有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串时，则不应使用<code>setData()</code>来设置这些数据</li><li>与界面渲染无关的数据最好不要设置在data中，可以考虑设置在page对象的其他字段下</li></ul><p>三、对于一些<strong>独立的模块我们尽可能抽离出来</strong>，这是因为自定义组件的更新并不会影响页面上其他元素的更新</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>「小程序启动加载性能」：</p><ul><li>控制代码包的大小</li><li>分包加载</li><li>首屏体验（预请求，利用缓存，避免白屏，及时反馈</li></ul><p>「小程序渲染性能」：</p><ul><li>避免不当的使用setData</li><li>使用自定义组件</li></ul>',21),d=[r];function n(s,p,h,u,_,g){return t(),a("div",null,d)}const b=e(c,[["render",n]]);export{m as __pageData,b as default};
