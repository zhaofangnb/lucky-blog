import{_ as e,c as i,o,d as l}from"./app.008430f5.js";const c="/lucky-blog/wechat/login.png",s="/lucky-blog/wechat/login1.png",f=JSON.parse('{"title":"小程序登录","description":"","frontmatter":{},"headers":[{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[]}],"relativePath":"basic/wechat/login.md","lastUpdated":null}'),d={name:"basic/wechat/login.md"},t=l('<h1 id="小程序登录" tabindex="-1">小程序登录 <a class="header-anchor" href="#小程序登录" aria-hidden="true">#</a></h1><ul><li>实现小程序用户体系主要涉及到<code>openid</code> 和 <code>code</code>的概念</li><li>调用<code>wx.login()</code>方法会生成<code>code</code>,将<code>code</code>作为参数传递给微信服务器指定接口，就可以获取用户的<code>openid</code></li><li>对于每个小程序，微信都会将<code>用户的微信ID</code>映射出一个<code>小程序openid</code>，作为这个用户在这个小程序的<code>唯一标识</code></li></ul><p><img src="'+c+'" alt=""></p><ul><li>通过 wx.login() 获取到用户的code判断用户是否授权读取用户信息，调用wx.getUserInfo 读取用户数据</li><li>由于小程序后台授权域名无法授权微信的域名，所以需要自身后端调用微信服务器获取用户信息</li><li>通过 wx.request() 方法请求业务方服务器，后端把 appid , appsecret 和 code 一起发送到微信服务器。appid 和 - appsecret 都是微信提供的，可以在管理员后台找到</li><li>微信服务器返回了 openid 及本次登录的会话密钥 session_key</li><li>后端从数据库中查找 openid ，如果没有查到记录，说明该用户没有注册，如果有记录，则继续往下走</li><li>session_key 是对用户数据进行加密签名的密钥。为了自身应用安全，session_key 不应该在网络上传输</li><li>然后生成 session并返回给小程序</li><li>小程序把 session 存到 storage 里面</li><li>下次请求时，先从 storage 里面读取，然后带给服务端</li><li>服务端对比 session 对应的记录，然后校验有效期</li></ul><p>更加详细的功能图如下所示：<br><img src="'+s+'" alt=""></p><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-hidden="true">#</a></h2><p>实际业务中，需要校验登录态是否过期</p><ul><li>第一种方式: 将本地存储的登录态发送到小程序的服务端，服务端判断为无效登录态时再返回需重新执行登录过程的消息给小程序</li><li>第二种方式: 调用<code>wx.checkSession()</code>检查微信登录态是否过期,如果过期，发起完整的登录流程，如果不过其，则继续使用本地保存的自定义登录态，好处是不需要小程序服务端参与。</li></ul>',8),a=[t];function n(r,p,_,h,g,u){return o(),i("div",null,a)}const x=e(d,[["render",n]]);export{f as __pageData,x as default};
