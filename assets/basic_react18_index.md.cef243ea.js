import{_ as s,c as a,o as n,d as l}from"./app.008430f5.js";const C=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[{"level":2,"title":"React组件中事件代理及原理","slug":"react组件中事件代理及原理","link":"#react组件中事件代理及原理","children":[]},{"level":2,"title":"React心智模型","slug":"react心智模型","link":"#react心智模型","children":[{"level":3,"title":"重新渲染的困境","slug":"重新渲染的困境","link":"#重新渲染的困境","children":[]}]},{"level":2,"title":"React的规则","slug":"react的规则","link":"#react的规则","children":[]}],"relativePath":"basic/react18/index.md","lastUpdated":null}'),o={name:"basic/react18/index.md"},p=l(`<h1 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-hidden="true">#</a></h1><p>##　React的事件和普通HTML事件有什么不同?</p><p>区别： 对于事件命名方式，原生事件全小写，React事件采用小驼峰。<br></p><p>对于事件处理函数，React事件为函数，不能采用<code>return false</code>的方式来阻止浏览器的默认行为，必须明确的调用<code>preventDefault()</code></p><p><code>合成事件</code>是React模拟原生DOM事件所有能力的一个事件对象，优点如下:</p><p><code>兼容所有浏览器，更好的跨平台</code></p><p><code>将事件统一存放在一个数组，避免频繁的新增与删除(垃圾回收)</code></p><p><code>方便 React 统一管理和事务机制</code></p><p><code>事件的执行顺序是原生事件先执行，合成事件后执行，合成事件回冒泡绑定到document上</code></p><h2 id="react组件中事件代理及原理" tabindex="-1">React组件中事件代理及原理 <a class="header-anchor" href="#react组件中事件代理及原理" aria-hidden="true">#</a></h2><p>React基于<code>虚拟DOM</code> 实现了一个<code>合成事件层</code>,定义的事件处理器回接收到一个合成事件对象的实例，它符合W3C标准，且与原生的浏览器事件拥有相同的接口，支持冒泡机制，所有的事件都绑定在最外层上。<br></p><p>在React最底层，主要对合成事件做了两件事：</p><p><code>事件委派</code>: React会把所有的事件绑定到结构的最外层，使用统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部事件监听和处理函数 <code>自动绑定</code>: React组件中，每个方法的上下文都会指向该组件的实例，及自动绑定this为当前组件</p><p>##　React高阶组件、Render props、hooks 有什么区别，为什么要不断迭代？</p><p>这三者是目前React解决代码复用的主要方式：</p><p><code>高阶组件(HOC)</code>是React中用于复用组件逻辑的一种高级技巧。高阶组件是参数为组件，返回值为新组件的函数,HOC是纯函数，没有副作用。</p><p><code>reder props</code> 是指一种在React组件之间使用一个值为函数的props共享代码的简单技术。用于告知组件需要渲染什么内容的函数prop.</p><h2 id="react心智模型" tabindex="-1">React心智模型 <a class="header-anchor" href="#react心智模型" aria-hidden="true">#</a></h2><p>每当应用状态发生变化时，React就会重新渲染。然而，有时React可能会<code>过于“反应灵敏</code>，导致不必要的重新渲染，从而降低应用的性能。</p><h3 id="重新渲染的困境" tabindex="-1">重新渲染的困境 <a class="header-anchor" href="#重新渲染的困境" aria-hidden="true">#</a></h3><p>React 对应用状态变化的快速响应能力是一把双刃剑。一方面，由于其声明式方法，它简化了前端开发。另一方面，它可能导致 UI 中组件对状态变化的过度重新渲染。</p><p>当处理如<code>对象和数组</code>这样的 JavaScript 数据结构时，重新渲染问题尤为常见。问题在于，JavaScript中没有一种计算效率高的方法来比较两个对象或数组是否相等（即具有相同的键和值）。</p><p>考虑以下场景：有一个React组件，它在每次渲染时都会生成一个新的对象或数组，如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> AlphabetList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alphabet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> length</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">26</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromCharCode</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">65</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// A-Z</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Alphabet List</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            alphabet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">letter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">letter </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">letter</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            ))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> AlphabetList</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>为了优化这种情况并减少不必要的重新渲染，React 开发人员可以利用<code>记忆化技术</code>。记忆化<code>允许缓存基于特定输入的计算结果或组件输出，并在输入未变时直接复用这些结果</code>。这种方法<code>能够显著减少组件的重新渲染次数，提高 React 应用的整体性能和效率</code>。</p><p>React18提供了一下记忆工具来帮助我们实现这一目标:</p><ul><li><code>React.memo()</code>：一个<code>高阶组件</code>，允许<code>基于props的浅比较</code>来避免组件的重新渲染，<code>只要props没有发生变化</code>。</li><li><code>useMemo(</code>)：用于在<code>组件重新渲染之间缓存计算的结果</code>。只有<code>当依赖项之一发生变化,时</code>，useMemo()才会重新计算并返回新的结果。 <strong>可用于记忆化数组的引用，重新渲染时不会重新被创建</strong></li><li><code>useCallback()</code>：用于缓存函数的定义，确保在<code>依赖项未变时不会重新创建函数</code>。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> AlphabetList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alphabet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useMemo</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> length</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">26</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromCharCode</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">65</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> [])</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// A-Z</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Alphabet List</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            alphabet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">letter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">letter </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">letter</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            ))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> AlphabetList</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="react的规则" tabindex="-1">React的规则 <a class="header-anchor" href="#react的规则" aria-hidden="true">#</a></h2><ul><li><code>幂等性原则</code>: React组件在接收到<code>相同的输入（包括props、state和context）</code>时，应始终产生<code>一致的输出</code>。</li><li><code>副作用外部化</code>: 副作用操作（如数据获取、订阅或DOM更新）<code>不应嵌入在组件的渲染流程中</code>。它们应被放置在如<code>useEffect</code>等生命周期 Hook 中执行。</li><li><code>不可变props与state</code>： React组件中的<code>props和state应被视为不可变</code>。直接修改它们可能导致错误和不可预测的行为。</li><li><code>Hooks参数与返回值的不变性</code>: 一旦值被传递给 React Hooks，它们应保持不变。Hooks依赖其参数和返回值的稳定性来确保组件行为的一致性和可预测性。</li><li><code>不可变JSX值</code>: 在 JSX 渲染后，不应修改其中使用的值。任何必要的修改应在JSX创建之前进行，以确保渲染结果的稳定性。</li><li><code>组件函数的使用限制</code>：React组件应通过JSX使用，而非直接作为普通函数调用。</li><li><code>Hooks的正确使用</code>：<code>React Hooks（如useState和useEffect）应仅在函数组件内部使用</code>。将它们作为普通值传递可能会导致不符合预期的行为并违反Hooks的使用规则。</li><li><code>只在顶层调用hooks</code>：React hooks 应该始终在函数组件的顶层调用，即在任何条件语句或循环之前。这确保了hooks在每次渲染时都以相同的顺序被调用，并保持其预期的行为。</li></ul>`,30),e=[p];function t(c,r,F,y,D,i){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
